<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Go源码 - 分类 - Golang梦工厂</title>
        <link>https://asong2020.github.io/categories/go%E6%BA%90%E7%A0%81/</link>
        <description>Go源码 - 分类 - Golang梦工厂</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>741896420@qq.com (asong)</managingEditor>
            <webMaster>741896420@qq.com (asong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 26 Jul 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://asong2020.github.io/categories/go%E6%BA%90%E7%A0%81/" rel="self" type="application/rss+xml" /><item>
    <title>Go语言反射获取结构体字段的过程</title>
    <link>https://asong2020.github.io/%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E6%AE%B5%E8%BF%87%E7%A8%8B/</link>
    <pubDate>Mon, 26 Jul 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://asong2020.github.io/%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E6%AE%B5%E8%BF%87%E7%A8%8B/</guid>
    <description><![CDATA[前言 哈喽，大家好，我是asong，今天这篇文章的目的主要是解答一位读者的疑问，涉及知识点是反射和结构体内存布局。我们先看一下读者的问题： 我们]]></description>
</item><item>
    <title>GO语言中的内联函数</title>
    <link>https://asong2020.github.io/go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/</link>
    <pubDate>Thu, 15 Jul 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://asong2020.github.io/go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/</guid>
    <description><![CDATA[前言 哈喽，大家好，我是asong。今天与大家来聊一聊内联函数。虽然我们在开发中根本不需要考虑内联函数，其在编译器编译代码时会做优化，但是如果]]></description>
</item><item>
    <title>Go语言源码剖析channel的设计与实现</title>
    <link>https://asong2020.github.io/%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90channel%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
    <pubDate>Mon, 28 Jun 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://asong2020.github.io/%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90channel%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
    <description><![CDATA[前言 哈喽，大家好，我是asong。终于回归了，停更了两周了，这两周一直在搞留言号的事，经过漫长的等待，终于搞定了。兄弟们，以后就可以在留言区]]></description>
</item><item>
    <title>Go标准库是如何实现二分查找的</title>
    <link>https://asong2020.github.io/go%E6%A0%87%E5%87%86%E5%BA%93%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%9A%84/</link>
    <pubDate>Tue, 15 Jun 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://asong2020.github.io/go%E6%A0%87%E5%87%86%E5%BA%93%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%9A%84/</guid>
    <description><![CDATA[前言 哈喽，大家好，我是asong。今天与大家分享一下Go标准库sort.Search是如何实现二分查找的，为什么突然想到分享这个函数呢。起因]]></description>
</item><item>
    <title>Go语言中的神奇函数init</title>
    <link>https://asong2020.github.io/go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E7%A5%9E%E5%A5%87%E5%87%BD%E6%95%B0init/</link>
    <pubDate>Mon, 07 Jun 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://asong2020.github.io/go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E7%A5%9E%E5%A5%87%E5%87%BD%E6%95%B0init/</guid>
    <description><![CDATA[前言 哈喽，兄弟们，我是asong。今天与大家聊一聊Go语言中的神奇函数init，为什么叫他神奇函数呢？因为该函数可以在所有程序执行开始前被调]]></description>
</item><item>
    <title>Go语言中interface的类型断言实现原理及性能分析</title>
    <link>https://asong2020.github.io/interface%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</link>
    <pubDate>Sun, 18 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://asong2020.github.io/interface%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</guid>
    <description><![CDATA[前言 哈喽，everyBody，我是asong，今天我们一起来探索一下interface的类型断言是如何实现的。我们通常使用interface]]></description>
</item><item>
    <title>Go语言标准库unsafe包源码解析</title>
    <link>https://asong2020.github.io/%E6%A0%87%E5%87%86%E5%BA%93unsafe%E5%8C%85%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link>
    <pubDate>Wed, 10 Mar 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://asong2020.github.io/%E6%A0%87%E5%87%86%E5%BA%93unsafe%E5%8C%85%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid>
    <description><![CDATA[前言 有看源码的朋友应该会发现，Go标准库中大量使用了unsafe.pointer，要想更好的理解源码实现，就要知道unsafe.pointe]]></description>
</item><item>
    <title>Go语言并发编程之sync.waitGroup的源码解析</title>
    <link>https://asong2020.github.io/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8Bsync.waitgroup%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link>
    <pubDate>Wed, 10 Feb 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://asong2020.github.io/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8Bsync.waitgroup%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid>
    <description><![CDATA[前言 哈喽，大家好，我是asong，这是我并发编程系列的第三篇文章，上一篇我们一起分析了sync.once的使用与实现，今天我们一起来看一看s]]></description>
</item><item>
    <title>详解并发编程之sync.Once的实现(附上三道面试题)</title>
    <link>https://asong2020.github.io/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8Bsync.once%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link>
    <pubDate>Fri, 29 Jan 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://asong2020.github.io/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8Bsync.once%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid>
    <description><![CDATA[哈喽，大家好，我是asong，这是我并发编程系列的第二篇文章. 上一篇我们一起分析了atomic包，今天我们一起来看一看sync/once的使]]></description>
</item><item>
    <title>详解并发编程基础之原子操作(atomic)</title>
    <link>https://asong2020.github.io/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8Batmoic%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link>
    <pubDate>Thu, 28 Jan 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://asong2020.github.io/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8Batmoic%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid>
    <description><![CDATA[前言 嗨，大家好，我是asong。最近想写一个并发编程系列的文章，使用Go也有一段时间了，但是对并发的理解不是很透彻，借着这次总结，希望能更进]]></description>
</item></channel>
</rss>
