<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Go应用 - 分类 - Golang梦工厂</title>
        <link>https://asong2020.github.io/categories/go%E5%BA%94%E7%94%A8/</link>
        <description>Go应用 - 分类 - Golang梦工厂</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>741896420@qq.com (asong)</managingEditor>
            <webMaster>741896420@qq.com (asong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 12 Sep 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://asong2020.github.io/categories/go%E5%BA%94%E7%94%A8/" rel="self" type="application/rss+xml" /><item>
    <title>Go语言如何操纵Kafka保证无消息丢失</title>
    <link>https://asong2020.github.io/go%E8%AF%AD%E8%A8%80%E5%A6%82%E4%BD%95%E6%93%8D%E7%BA%B5kafka%E4%BF%9D%E8%AF%81%E6%97%A0%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1/</link>
    <pubDate>Sun, 12 Sep 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://asong2020.github.io/go%E8%AF%AD%E8%A8%80%E5%A6%82%E4%BD%95%E6%93%8D%E7%BA%B5kafka%E4%BF%9D%E8%AF%81%E6%97%A0%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1/</guid>
    <description><![CDATA[背景 目前一些互联网公司会使用消息队列来做核心业务，因为是核心业务，所以对数据的最后一致性比较敏感，如果中间出现数据丢失，就会引来用户的投诉，]]></description>
</item><item>
    <title>微服务架构下的熔断框架:hystrix-go</title>
    <link>https://asong2020.github.io/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8B%E7%9A%84%E7%86%94%E6%96%AD%E6%A1%86%E6%9E%B6-hystrixgo/</link>
    <pubDate>Sun, 05 Sep 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://asong2020.github.io/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8B%E7%9A%84%E7%86%94%E6%96%AD%E6%A1%86%E6%9E%B6-hystrixgo/</guid>
    <description><![CDATA[背景 伴随着微服务架构被宣传得如火如茶，一些概念也被推到了我们的面前。一提到微服务，就离不开这几个字：高内聚低耦合；微服务的架构设计最终目的也]]></description>
</item><item>
    <title>源码赏析Go官方扩展信号量库Semaphore</title>
    <link>https://asong2020.github.io/go%E5%AE%98%E6%96%B9%E8%AE%BE%E8%AE%A1%E4%BA%86%E4%B8%80%E4%B8%AA%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%BA%93/</link>
    <pubDate>Sun, 29 Aug 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://asong2020.github.io/go%E5%AE%98%E6%96%B9%E8%AE%BE%E8%AE%A1%E4%BA%86%E4%B8%80%E4%B8%AA%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%BA%93/</guid>
    <description><![CDATA[前言 哈喽，大家好，我是asong。在写上一篇文章请勿滥用goroutine时，发现Go语言扩展包提供了一个带权重的信号量库Semaphore]]></description>
</item><item>
    <title>控制goroutine退出和数量的几种方式</title>
    <link>https://asong2020.github.io/%E6%8E%A7%E5%88%B6goroutine%E9%80%80%E5%87%BA%E5%92%8C%E6%95%B0%E9%87%8F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
    <pubDate>Sun, 22 Aug 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://asong2020.github.io/%E6%8E%A7%E5%88%B6goroutine%E9%80%80%E5%87%BA%E5%92%8C%E6%95%B0%E9%87%8F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
    <description><![CDATA[前言 哈喽，大家好，我是asong。Go语言中，goroutine的创建成本很低，调度效率很高，人称可以开几百几千万个goroutine，但是]]></description>
</item><item>
    <title>防缓存穿透利器-singleflight源码赏析</title>
    <link>https://asong2020.github.io/%E8%B5%8F%E6%9E%90singleflight%E8%AE%BE%E8%AE%A1/</link>
    <pubDate>Thu, 15 Jul 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://asong2020.github.io/%E8%B5%8F%E6%9E%90singleflight%E8%AE%BE%E8%AE%A1/</guid>
    <description><![CDATA[前言 哈喽，大家好，我是asong。今天想与大家分享一下singleflight这个库，singleflight仅仅只有100多行却可以做到防]]></description>
</item><item>
    <title>Go语言编程模式之装饰器</title>
    <link>https://asong2020.github.io/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
    <pubDate>Mon, 12 Jul 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://asong2020.github.io/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
    <description><![CDATA[前言 哈喽，大家好，我是asong。今天想与大家聊一聊如何用Go实现装饰器代码。为什么会有这个想法呢？最近由于项目需要一直在看python的代]]></description>
</item><item>
    <title>Go语言如何实现可重入锁</title>
    <link>https://asong2020.github.io/go%E5%AE%9E%E7%8E%B0%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81/</link>
    <pubDate>Mon, 31 May 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://asong2020.github.io/go%E5%AE%9E%E7%8E%B0%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81/</guid>
    <description><![CDATA[前言 哈喽，大家好，我是asong。前几天一个读者问我如何使用Go语言实现可重入锁，突然想到Go语言中好像没有这个概念，平常在业务开发中也没有]]></description>
</item><item>
    <title>Leaf—Segment分布式ID生成系统（Golang实现版本）</title>
    <link>https://asong2020.github.io/leaf-segmentgo%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</link>
    <pubDate>Sun, 06 Dec 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://asong2020.github.io/leaf-segmentgo%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</guid>
    <description><![CDATA[Leaf-Segment 简介：今天直接开门见山，先来介绍一下我今天所带来的东西。没错，看标题想必大家已经想到了 —— Leaf-segment数据库获取ID方案。这个]]></description>
</item><item>
    <title>machinery入门看这一篇（异步任务队列）</title>
    <link>https://asong2020.github.io/machonery-go%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/</link>
    <pubDate>Sat, 31 Oct 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://asong2020.github.io/machonery-go%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/</guid>
    <description><![CDATA[前言 哈喽，大家好，我是asong，这次给大家介绍一个go的异步任务框架machinery。使用过python的同学们都知道Celery框架，]]></description>
</item><item>
    <title>设计模式之Go语言实现单例模式</title>
    <link>https://asong2020.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sun, 20 Sep 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://asong2020.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[前言 哈喽，大家好，我是asong，这是我的第16篇原创文章，感谢各位的关注。今天给大家分享设计模式之单例模式，并使用go语言实现。熟悉jav]]></description>
</item></channel>
</rss>
